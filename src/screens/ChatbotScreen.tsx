import React, { useState, useRef, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  TextInput,
  FlatList,
  KeyboardAvoidingView,
  Platform,
  Alert,
  ScrollView,
  Keyboard,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useNavigation } from '@react-navigation/native';
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';

interface Message {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
}

const ChatbotScreen = () => {
  const navigation = useNavigation();
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: 'Ch√†o b·∫°n! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n ph√¢n t√≠ch d·ªØ li·ªáu b√°n h√†ng, qu·∫£n l√Ω kho v√† nhi·ªÅu v·∫•n ƒë·ªÅ kh√°c. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?',
      isUser: false,
      timestamp: new Date(),
    },
  ]);
  const [inputText, setInputText] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [keyboardVisible, setKeyboardVisible] = useState(false);
  const flatListRef = useRef<FlatList>(null);

  const quickQuestions = [
    'Ph√¢n t√≠ch b√°n h√†ng trong th√°ng qua',
    'Chi·∫øn d·ªãch kinh doanh',
    'G·ª£i √Ω nh·∫≠p h√†ng',
    'B√°o c√°o doanh thu',
    'D·ª± b√°o doanh thu',
  ];

  const scrollToBottom = () => {
    setTimeout(() => {
      flatListRef.current?.scrollToEnd({ animated: true });
    }, 100);
  };

  const sendMessage = async (messageText: string) => {
    if (!messageText.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: messageText.trim(),
      isUser: true,
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setInputText('');
    setIsLoading(true);
    scrollToBottom();

    // Simulate AI response - Replace with actual Gemini API call
    setTimeout(() => {
      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        text: getAIResponse(messageText),
        isUser: false,
        timestamp: new Date(),
      };
      
      setMessages(prev => [...prev, aiResponse]);
      setIsLoading(false);
      scrollToBottom();
    }, 1500);
  };

  const getAIResponse = (userMessage: string): string => {
    // Simulate different responses based on message content
    if (userMessage.toLowerCase().includes('ph√¢n t√≠ch') || userMessage.toLowerCase().includes('b√°n ch·∫°y')) {
      return `üìä Ph√¢n t√≠ch b√°n h√†ng

D·ª±a tr√™n d·ªØ li·ªáu b√°n h√†ng 30 ng√†y qua, c√°c m·∫∑t h√†ng c√≥ s·ªë l∆∞·ª£ng b√°n cao v√† t·ªëc ƒë·ªô xoay v√≤ng t·ªìn kho nhanh nh·∫•t l√†:

‚Ä¢ √Åo thun basic: 320 ƒë∆°n/th√°ng ‚Üí b√°n m·∫°nh.
‚Ä¢ Qu·∫ßn jean skinny: 240 ƒë∆°n ‚Üí g·∫ßn h·∫øt h√†ng.
‚Ä¢ Gi√†y sneaker tr·∫Øng: 190 ƒë∆°n ‚Üí ƒë√°nh gi√° cao.

‚úÖ Khuy·∫øn ngh·ªã nh·∫≠p h√†ng
‚úÖ TƒÉng nh·∫≠p √°o thun v√† qu·∫ßn jean g·∫•p 1.5~2 l·∫ßn.
‚úÖ B·ªï sung 50~100 ƒë√¥i sneaker tr·∫Øng.
‚úÖ Gi·∫£m nh·∫≠p hoodie d√†y v√¨ b√°n ch·∫≠m.`;
    }
    
    if (userMessage.toLowerCase().includes('chi·∫øn d·ªãch') || userMessage.toLowerCase().includes('kinh doanh')) {
      return 'T√¥i c√≥ th·ªÉ gi√∫p b·∫°n l·∫≠p k·∫ø ho·∫°ch chi·∫øn d·ªãch kinh doanh hi·ªáu qu·∫£. B·∫°n mu·ªën t·∫≠p trung v√†o s·∫£n ph·∫©m n√†o v√† trong th·ªùi gian n√†o?';
    }
    
    if (userMessage.toLowerCase().includes('b√°o c√°o') || userMessage.toLowerCase().includes('doanh thu')) {
      return 'B√°o c√°o doanh thu ƒëang ƒë∆∞·ª£c t·∫°o. B·∫°n mu·ªën xem b√°o c√°o theo ng√†y, tu·∫ßn, th√°ng hay qu√Ω?';
    }
    
    return 'C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i tin nh·∫Øn! T√¥i ƒëang x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n v√† s·∫Ω ph·∫£n h·ªìi s·ªõm nh·∫•t c√≥ th·ªÉ.';
  };

  const handleQuickQuestion = (question: string) => {
    sendMessage(question);
  };

  const handleImagePick = () => {
    Alert.alert('Ch·ªçn ·∫£nh', 'T√≠nh nƒÉng ch·ªçn ·∫£nh s·∫Ω ƒë∆∞·ª£c tri·ªÉn khai s·ªõm!');
  };

  const handleVoiceInput = () => {
    Alert.alert('Ghi √¢m', 'T√≠nh nƒÉng ghi √¢m s·∫Ω ƒë∆∞·ª£c tri·ªÉn khai s·ªõm!');
  };

  const renderMessage = ({ item }: { item: Message }) => (
    <View style={[
      styles.messageContainer,
      item.isUser ? styles.userMessage : styles.aiMessage
    ]}>
      <View style={[
        styles.messageBubble,
        item.isUser ? styles.userBubble : styles.aiBubble
      ]}>
        <Text style={[
          styles.messageText,
          item.isUser ? styles.userText : styles.aiText
        ]}>
          {item.text}
        </Text>
        <Text style={styles.timeText}>
          {item.timestamp.toLocaleTimeString('vi-VN', { 
            hour: '2-digit', 
            minute: '2-digit' 
          })}
        </Text>
      </View>
    </View>
  );

  const renderQuickQuestion = ({ item, index }: { item: string; index: number }) => (
    <TouchableOpacity
      style={styles.quickQuestionButton}
      onPress={() => handleQuickQuestion(item)}
    >
      <Text style={styles.quickQuestionText}>{item}</Text>
    </TouchableOpacity>
  );

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    const keyboardDidShowListener = Keyboard.addListener('keyboardDidShow', () => {
      setKeyboardVisible(true);
    });
    const keyboardDidHideListener = Keyboard.addListener('keyboardDidHide', () => {
      setKeyboardVisible(false);
    });

    return () => {
      keyboardDidShowListener?.remove();
      keyboardDidHideListener?.remove();
    };
  }, []);

  return (
    <SafeAreaView style={styles.container} edges={['top','bottom','left','right']}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity 
          style={styles.backButton}
          onPress={() => navigation.goBack()}
        >
          <Icon name="arrow-left" size={24} color="#000000" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Chat v·ªõi AI</Text>
        <TouchableOpacity style={styles.moreButton}>
          <Icon name="dots-horizontal" size={24} color="#000000" />
        </TouchableOpacity>
      </View>

             <KeyboardAvoidingView 
         style={styles.content}
         behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
         keyboardVerticalOffset={Platform.OS === 'ios' ? 90 : 25}
         enabled={true}
       >
        {/* Messages */}
        <FlatList
          ref={flatListRef}
          data={messages}
          renderItem={renderMessage}
          keyExtractor={(item) => item.id}
          style={styles.messagesList}
          contentContainerStyle={styles.messagesContent}
          showsVerticalScrollIndicator={false}
          onContentSizeChange={scrollToBottom}
        />

        {/* Loading indicator */}
        {isLoading && (
          <View style={styles.loadingContainer}>
            <View style={styles.loadingBubble}>
              <Text style={styles.loadingText}>AI ƒëang tr·∫£ l·ªùi...</Text>
            </View>
          </View>
        )}

        {/* Quick Questions - Only show when keyboard is not visible */}
        {!keyboardVisible && (
          <View style={styles.quickQuestionsContainer}>
            <FlatList
              data={quickQuestions}
              renderItem={renderQuickQuestion}
              keyExtractor={(item, index) => index.toString()}
              horizontal
              showsHorizontalScrollIndicator={false}
              contentContainerStyle={styles.quickQuestionsContent}
            />
          </View>
        )}

        {/* Input Bar */}
        <View style={styles.inputContainer}>
          <View style={styles.inputWrapper}>
            <TextInput
              style={styles.textInput}
              placeholder="Nh·∫Øn tin nh·∫Øn"
              value={inputText}
              onChangeText={setInputText}
              multiline
              maxLength={500}
            />
            <TouchableOpacity 
              style={styles.attachButton}
              onPress={handleImagePick}
            >
              <Icon name="image-outline" size={24} color="#666666" />
            </TouchableOpacity>
          </View>
          
          {inputText.trim() ? (
            <TouchableOpacity 
              style={styles.sendButton}
              onPress={() => sendMessage(inputText)}
            >
              <Icon name="send" size={20} color="#FFFFFF" />
            </TouchableOpacity>
          ) : (
            <TouchableOpacity 
              style={styles.voiceButton}
              onPress={handleVoiceInput}
            >
              <Icon name="microphone" size={24} color="#FFFFFF" />
            </TouchableOpacity>
          )}
        </View>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#EEEEEE',
    backgroundColor: '#FFFFFF',
  },
  backButton: {
    padding: 8,
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#000000',
  },
  moreButton: {
    padding: 8,
  },
  content: {
    flex: 1,
  },
  messagesList: {
    flex: 1,
    paddingHorizontal: 16,
  },
  messagesContent: {
    paddingVertical: 16,
  },
  messageContainer: {
    marginVertical: 4,
  },
  userMessage: {
    alignItems: 'flex-end',
  },
  aiMessage: {
    alignItems: 'flex-start',
  },
  messageBubble: {
    maxWidth: '80%',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderRadius: 20,
  },
  userBubble: {
    backgroundColor: '#007AFF',
    borderBottomRightRadius: 6,
  },
  aiBubble: {
    backgroundColor: '#E5E5E7',
    borderBottomLeftRadius: 6,
  },
  messageText: {
    fontSize: 16,
    lineHeight: 20,
  },
  userText: {
    color: '#FFFFFF',
  },
  aiText: {
    color: '#000000',
  },
  timeText: {
    fontSize: 12,
    color: '#999999',
    marginTop: 4,
    textAlign: 'right',
  },
  loadingContainer: {
    paddingHorizontal: 16,
    alignItems: 'flex-start',
  },
  loadingBubble: {
    backgroundColor: '#E5E5E7',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderRadius: 20,
    borderBottomLeftRadius: 6,
  },
  loadingText: {
    fontSize: 16,
    color: '#666666',
    fontStyle: 'italic',
  },
  quickQuestionsContainer: {
    paddingVertical: 12,
  },
  quickQuestionsContent: {
    paddingHorizontal: 16,
  },
  quickQuestionButton: {
    backgroundColor: '#E5E5E7',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderRadius: 20,
    marginRight: 12,
    maxWidth: 280,
  },
  quickQuestionText: {
    fontSize: 14,
    color: '#333333',
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingTop: 8,
    paddingBottom: Platform.OS === 'ios' ? 12 : 10,
    backgroundColor: '#FFFFFF',
    borderTopWidth: 1,
    borderTopColor: '#EEEEEE',
    minHeight: 56,
  },
  inputWrapper: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F0F0F0',
    borderRadius: 20,
    paddingHorizontal: 16,
    paddingVertical: 6,
    marginRight: 8,
    minHeight: 40,
  },
  textInput: {
    flex: 1,
    fontSize: 16,
    maxHeight: 100,
    minHeight: 32,
    color: '#000000',
    textAlignVertical: 'center',
  },
  attachButton: {
    padding: 6,
    marginLeft: 6,
  },
  sendButton: {
    backgroundColor: '#007AFF',
    width: 44,
    height: 44,
    borderRadius: 22,
    alignItems: 'center',
    justifyContent: 'center',
  },
  voiceButton: {
    backgroundColor: '#007AFF',
    width: 44,
    height: 44,
    borderRadius: 22,
    alignItems: 'center',
    justifyContent: 'center',
  },
});

export default ChatbotScreen;
